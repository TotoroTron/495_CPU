DEPTH = 256;
WIDTH = 30;

ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;

CONTENT
BEGIN

10 : 010000000000000000000000010001; -- FETCH1: MAR <= PC   
11 : 000010100000000000000000010010; -- FETCH2: DR <= M[MAR]   PC <= PC + 1
12 : 000000000000000000100100000000; -- FETCH3: IR <= DR   
00 : 000000000000000000000000010000; -- NOP1:    
20 : 010000000000000000000000100001; -- LOAD1: MAR <= PC   
21 : 000010100000000000000000100010; -- LOAD2: DR <= M[MAR]   PC <= PC + 1
22 : 001000000000000000000000100011; -- LOAD3: MAR <= DR   
23 : 000000100000000000000000100100; -- LOAD4: DR <= M[MAR]   
24 : 000000001000000000000000010000; -- LOAD5: A <= DR   
30 : 010000000000000000000000110001; -- STORE1: MAR <= PC   
31 : 000010100000000000000000110010; -- STORE2: DR <= M[MAR]   PC <= PC + 1
32 : 001000000000000000000000110011; -- STORE3: MAR <= DR   
33 : 000000010000000000000000110100; -- STORE4: DR <= A   
34 : 100000000000000000000000010000; -- STORE5: M[MAR] <= DR   
40 : 000000000000000001000000010000; -- MOVE1: R <= A   
50 : 000000000100000000000000010000; -- ADD1: A <= A+R   
60 : 000000000010000000000000010000; -- XOR1: A <= A xor R   
70 : 000000000000100000000000010000; -- TESTNZ1: Z <= V'   
71 : 000000000000010000000000010000; -- TESTZ1: Z <= V   
80 : 010000000000000000000010000001; -- JUMPX1: MAR <= PC   
81 : 000000100000000000000010000010; -- JUMPX2: DR <= M[MAR]   
82 : 000000000000000000010000010000; -- JUMPX3: PC <= DR   
90 : 010000000000000000000010010001; -- JUMPZX1: MAR <= PC   
91 : 000010100000000000000010010010; -- JUMPZX2: DR <= M[MAR]   PC <= PC + 1
92 : 000000000000000000001000010000; -- JUMPZX3: IF(Z=1) THEN PC <= DR   
B0 : 010000000000000000000010110001; -- LOADSPX1: MAR <= PC   
B1 : 000000100000000000000010110010; -- LOADSPX2: DR <= M[MAR]   
B2 : 000000000000001000000000010000; -- LOADSPX3: SP <= DR   
C0 : 000100000000000000000011000001; -- PEEK1: MAR <= SP   
C1 : 000000100000000000000011000010; -- PEEK2: DR <= M[MAR]   
C2 : 000000001000000000000000010000; -- PEEK3: A <= DR   
D0 : 000000000000000100000011010001; -- PUSH1: SP <= SP-1   
D1 : 000100010000000000000011010010; -- PUSH2: MAR <= SP   DR <= A
D2 : 100000000000000000000000010000; -- PUSH3: M[MAR] <= DR   
E0 : 000100000000000000000011100001; -- POP1: MAR <= SP   
E1 : 000000100000000000000011100010; -- POP2: DR <= M[MAR]   
E2 : 000000000001000000000011100011; -- POP3: A <= R   
E3 : 000000000000000010000000010000; -- POP4: SP <= SP+1   
F0 : 000001000000000000000000010000; -- HALT: PC <= 0
END;